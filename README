# -*- mode: org; org-html-head-include-default-style: nil; org-html-postamble: nil; -*-
#+OPTIONS: toc:nil num:nil
#+TITLE: nyxt.el
=nyxt.el= consists of custom logic to interact with [[https://nyxt.atlas.engineer/][Nyxt]] from Emacs. In contrast to other similar packages, it doesn't bundle any Nyxt configuration for you by default. Instead, it aims at providing a rich feature set of custom interactive functions via the =nyxt-run= entry function. This package requires the [[https://github.com/joaotavora/sly][SLY]] Emacs package to interact with the underlying Nyxt Lisp image.

* Installation
To install the package manually, simply point to the checkout in your =load-path=.

#+begin_src elisp
(add-to-list 'load-path "/path/to/nyxt.el")
#+end_src

Alternatively, if you want to get a development environment set up quickly, it's suggested you install a package manager such as [[https://guix.gnu.org/][GNU Guix]] or [[https://nixos.org/][Nix]] and start developing on the local package checkout with these commands:

For GNU Guix:

#+begin_src sh
guix shell --pure
#+end_src

For Nix:

#+begin_src sh
nix develop
#+end_src

* Usage
An example configuration for =nyxt.el= might look like this:

#+begin_src elisp
(define-key global-map (kbd "C-c y") 'nyxt-map)
(with-eval-after-load 'nyxt
  (setq nyxt-path "/path/to/nyxt")
  (setq nyxt-startup-flags (list "-e" "(start-slynk)")))
#+end_src

You can set the default bindings included in the =nyxt-map= to any key combination, as well as add or modify existing commands in this map.

You can also change the path to the Nyxt executable, such as if you're developing on Nyxt using its source.

You can change the Nyxt process startup flags to your liking, but beware that this package needs a Slynk process to be started for it to interact with the Lisp image, so either include it in your Nyxt configuration or keep it in the startup flags.
